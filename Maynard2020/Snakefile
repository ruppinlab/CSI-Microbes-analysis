from os.path import join
import pandas as pd

wildcard_constraints:
    celltype_of_interest="Tumor|MF.Monocytes|Epithelial|stroma"

plates_of_interest = [
    "B003659", "1001000327", "1001000339", "1001000340", "B003522", "B003588",
    "B003523", "B003528", "B003577", "B001543", "B001545", "B001548",
    "B000862", "B000863", "B000579", "B003654", "B003125", "B003126", "B003129",
    "B003132", "B003187", "B003191", "B003647", "B003112", "B003116", "B003119",
    "B003120", "B003771", "B003894", "B003920", "B003995", "B000420", "B000422",
    "B002077", "B002078", "B002079", "B003775", "B003776", "B003777", "B001470",
    "B001474", "B001475", "B001464", "B003518", "B003527", "B003529", "B003648",
    "1001000411", "B000860", "B000861"
]

units = pd.read_csv("data/units.tsv", sep="\t")
units = units.loc[units["plate"].isin(plates_of_interest)]
units = units.loc[~units.patient.isin(["TH169", "TH185"])]

wildcard_constraints:
    patient="|".join(units["patient"].drop_duplicates()),
    sample="|".join(units["sample"].drop_duplicates()),
    plate="|".join(units["plate"].drop_duplicates()),
    celltype="Tumor|celltype[1-3]|MF.Monocytes|Epithelial"



SPIKE_PREFIX = "ERCC-"
include: "../rules/common.smk"
include: "../rules/STARsolo.smk"
include: "../rules/spikein.smk"
include: "../rules/analysis-SS2.smk"
include: "../rules/hFDR.smk"


patients_with_epithelial_cells = set(units.patient.unique()) - set(["TH103", "TH225", "TH266"])
patients_with_stroma_cells = set(units.patient.unique()) - set(["TH103", "TH225", "TH227"])
patients_with_macrophages = set(units.patient.unique()) - set(["TH171"])

# Straussman comparison
#FILTERED_PATIENT_MICROBE_READ_TABLE = join("output", "{patient}_{tax_level}_{method}_{kingdom}_filtered_reads.tsv")
#FILTERED_BINOM_MARKERS = join("output", "filtered-binomial-{patient}-{celltype}-{celltype_of_interest}-{tax_level}-{method}-{kingdom}-{pvaltype}-{lfc}.tsv")

# Figures
FIGURE4 = join("output", "plots", "figure4.jpg")
FIGURE5 = join("output", "all", "plots", "fig5_{gene_of_interest}.jpg")



# MICROBE_SPIKEIN_PLATE_CORR_TABLE = join("output", "{patient}", "{tax_level}_{method}_{kingdom}_plate_spikein_correlation_table.tsv")
# MICROBE_SPIKEIN_CORR_TABLE = join("output", "{patient}", "{tax_level}_{method}_{kingdom}_spikein_correlation_table.tsv")

TUMOR_CELL_SCE = join("output", "all", "tumor_cells.rds")
TTEST_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS = join("output", "all", "ttest_tumor_cells_only_infected_vs_uninfected.tsv")
WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS = join("output", "all", "wilcox_tumor_cells_only_infected_vs_uninfected.tsv")
TTEST_TUMOR_OF_INTERST_UNINFECTED_TUMOR_CELL_RESULTS = join("output", "all", "ttest_tumor_cells_only_{tumor_of_interest}_vs_uninfected_{lfc}_{pvaltype}.tsv")
WILCOX_TUMOR_OF_INTERST_UNINFECTED_TUMOR_CELL_RESULTS = join("output", "all", "wilcox_tumor_cells_only_{tumor_of_interest}_vs_uninfected_{lfc}_{pvaltype}.tsv")

GO_GENE_SETS = join("..", "data", "c5.go.v7.2.symbols.gmt")
GSEA_TUMOR_OF_INTERST_TABLE = join("output",  "GSEA", "{tumor_of_interest}", "ttest_tumor_cells_only_{tumor_of_interest}_vs_uninfected_{lfc}_{pvaltype}.tsv")


# GO_GENE_SETS = join("output", "c5.go.v7.2.symbols.gmt")
# GSEA_DE_TABLE = join("output", "{patient}", "GSEA-DE", "GO-{celltype}-{celltype_of_interest}-{celltype_comparison}-{norm}-{pvaltype}-{lfc}-{block}.tsv")
# GSEA_CORR_TABLE = join(
#     "output", "{patient}", "GSEA-microbe-abundance-correlation",
#     "spearman-correlation-{kingdom}-{tax_level}-{microbe}-{celltype}-{celltype_of_interest}-{celltype_comparison}-{block}-{method}.tsv"
#     )

# patients with multiple samples - TH248 and LT_S69 and LT_S74; TH226 and LT_S52 and LT_S57; TH179 and LT_S58 and LT_S79
rule all:
    input:
        expand(PATIENT_hFDR_WILCOX_MARKERS, kingdom=["Bacteria"], method="PathSeq",
               patient=units.patient.unique(), celltype=["celltype1"], lfc=[".5"],
               celltype_of_interest="Tumor", celltype_comparison=["immune"],
               norm="spike", pvaltype="any", block="plate", direction=["up", "down"],
               minprop="0.5"),
        expand(GSEA_TUMOR_OF_INTERST_TABLE,
               tumor_of_interest = ["TH231", "TH236", "TH238", "TH266"],
               lfc=0.5, pvaltype=["some", "all"]),
        TTEST_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS


rule plot_figures:
    input:
        FIGURE4,
        expand(FIGURE5, gene_of_interest="S100A9")

### rules for plotting figures ###

rule plot_genes_across_tumors:
    input:
        TUMOR_CELL_SCE
    output:
        FIGURE5
    script:
        "src/plot_genes_across_tumors.R"

rule plot_figure4:
    params:
        spike_functions="../src/spike_normalization_functions.R"
    input:
        PATIENT_MICROBE_READ_TABLE.format(kingdom="Bacteria", method="PathSeq",
               patient="TH236", tax_level="species"),
        PATIENT_SPIKEIN_READCOUNT.format(patient="TH236"),
        PATIENT_SAMPLE_METADATA.format(kingdom="Bacteria", method="PathSeq",
               patient="TH236", tax_level="species"),
        PATHSEQ_TAXID_MAP.format(kingdom="Bacteria", method="PathSeq",
               patient="TH236"),
        PATIENT_MICROBE_READ_TABLE.format(kingdom="Bacteria", method="PathSeq",
               patient="TH238", tax_level="genus"),
        PATIENT_SPIKEIN_READCOUNT.format(patient="TH238"),
        PATIENT_SAMPLE_METADATA.format(kingdom="Bacteria", method="PathSeq",
               patient="TH238", tax_level="genus"),
        PATHSEQ_TAXID_MAP.format(kingdom="Bacteria", method="PathSeq",
               patient="TH238"),
        PATIENT_MICROBE_READ_TABLE.format(kingdom="Bacteria", method="PathSeq",
               patient="TH266", tax_level="species"),
        PATIENT_SPIKEIN_READCOUNT.format(patient="TH266"),
        PATIENT_SAMPLE_METADATA.format(kingdom="Bacteria", method="PathSeq",
               patient="TH266", tax_level="species"),
        PATHSEQ_TAXID_MAP.format(kingdom="Bacteria", method="PathSeq",
               patient="TH266"),
        PLATE_MICROBE_READ_TABLE.format(kingdom="Bacteria", method="PathSeq",
               patient="TH231",  sample="LT_S56", plate="B003119", tax_level="genus"),
        PLATE_SPIKEIN_READCOUNT.format(patient="TH231", sample="LT_S56", plate="B003119"),
        PLATE_SAMPLE_METADATA.format(kingdom="Bacteria", method="PathSeq",
               patient="TH231", sample="LT_S56", plate="B003119", tax_level="genus"),
        PATHSEQ_TAXID_MAP.format(kingdom="Bacteria", method="PathSeq",
               patient="TH231"),
    output:
        FIGURE4
    script:
        "src/plot_figure4.R"

### rules for comparing infected tumors to uninfected tumors

rule run_GSEA_GO_terms_DE:
    input:
        "../data/c5.go.v7.2.symbols.gmt",
        TTEST_TUMOR_OF_INTERST_UNINFECTED_TUMOR_CELL_RESULTS
    output:
        GSEA_TUMOR_OF_INTERST_TABLE
    script:
        "../src/run_fgsea_DE.R"


# for one infected tumor, compare against all other uninfected tumors
rule run_differential_expression_tumor_of_interest_vs_uninfected_tumor_cells_only:
    input:
        TUMOR_CELL_SCE
    output:
        TTEST_TUMOR_OF_INTERST_UNINFECTED_TUMOR_CELL_RESULTS,
        WILCOX_TUMOR_OF_INTERST_UNINFECTED_TUMOR_CELL_RESULTS
    script:
        "src/run_differential_expression_between_tumors.R"

# compare all infected tumor cells vs. all uninfected tumor cells
rule run_differential_expression_infected_vs_uninfected_tumor_cells_only:
    input:
        TUMOR_CELL_SCE
    output:
        TTEST_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS,
        WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS
    script:
        "src/run_differential_expression_infected_tumor_cells.R"

rule generate_sce_of_tumor_cells_from_all_patients:
    input:
        genes=expand(PATIENT_HUMAN_READCOUNT, patient=units.patient.unique()),
        spikes=expand(PATIENT_SPIKEIN_READCOUNT, patient=units.patient.unique()),
        meta="data/units.tsv"
    output:
        TUMOR_CELL_SCE
    script:
        "src/generate_sce_tumor_cells_all_patients.R"





# rule compute_spikein_correlation:
#     input:
#         PATIENT_MICROBE_READ_TABLE,
#         PATIENT_SPIKEIN_READCOUNT,
#         PATIENT_SAMPLE_METADATA,
#         PATHSEQ_TAXID_MAP,
#     output:
#         MICROBE_SPIKEIN_PLATE_CORR_TABLE,
#         MICROBE_SPIKEIN_CORR_TABLE
#     script:
#         "../Aulicino2018/src/compute_spikein_correlation.py"

### rules for Straussman comparison ###

# rule filter_by_Straussman:
#     input:
#         "data/lung_hits.tsv",
#         PATIENT_MICROBE_READ_TABLE
#     output:
#         FILTERED_PATIENT_MICROBE_READ_TABLE
#     script:
#         "../src/filter_by_Straussman_hits.py"

# rule identify_Straussman_overlap:
#     input:
#         "output/PathSeq_{kingdom}_{tax_level}_name_taxid_mapping.tsv".format(kingdom="Bacteria", tax_level="species"),
#         MICROBE_READ_TABLE.format(kingdom="Bacteria", tax_level="species", method="PathSeq"),
#         "../data/microbev1_lung_cancer_hits.tsv"
#     output:
#         "output/species_overlap_with_Straussman.tsv"
#     script:
#         "../src/identify_Straussman_overlap.py"

# rule calculate_patient_binomial_markers_filtered:
#     input:
#         FILTERED_PATIENT_MICROBE_READ_TABLE,
#         PATIENT_SAMPLE_METADATA
#     output:
#         FILTERED_BINOM_MARKERS,
#     script:
#         "../src/run_scran_binomial_marker_analysis.R"

# rsync -avc --include='pathseq.txt' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Maynard2020/output/ data/

# rsync -avc --include='barcodes.tsv' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Maynard2020/output/ data/
# rsync -avc --include='features.tsv' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Maynard2020/output/ data/
# rsync -avc --include='matrix.mtx' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Maynard2020/output/ data/
