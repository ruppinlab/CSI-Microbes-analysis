from os.path import join
import pandas as pd


plates_of_interest = [
    "B003659", "1001000327", "1001000339", "1001000340", "B003522", "B003588",
    "B003523", "B003528", "B003577", "B001543", "B001545", "B001548",
    "B000862", "B000863", "B000579", "B003654", "B003125", "B003126", "B003129",
    "B003132", "B003187", "B003191", "B003647", "B003112", "B003116", "B003119",
    "B003120", "B003771", "B003894", "B003920", "B003995", "B000420", "B000422",
    "B002077", "B002078", "B002079", "B003775", "B003776", "B003777", "B001470",
    "B001474", "B001475", "B001464", "B003518", "B003527", "B003529", "B003648",
    "1001000411", "B000860", "B000861"
]

units = pd.read_csv("data/units.tsv", sep="\t")
units = units.loc[units["plate"].isin(plates_of_interest)]
units = units.loc[~units.patient.isin(["TH169", "TH185"])]

wildcard_constraints:
    patient="|".join(units["patient"].drop_duplicates()),
    sample="|".join(units["sample"].drop_duplicates()),
    plate="|".join(units["plate"].drop_duplicates()),
    celltype="Tumor|celltype[1-3]|MF.Monocytes|Epithelial|Stroma",
    tumor_of_interest="|".join(units["patient"].drop_duplicates()),
    celltype_of_interest="Tumor|MF.Monocytes|Epithelial|stroma|immune|Stroma",
    celltype_comparison="Tumor|immune|nonTumor|nonStroma"


SPIKE_PREFIX = "ERCC-"
include: "../rules/common.smk"
include: "../rules/STARsolo.smk"
include: "../rules/analysis-SS2.smk"
include: "../rules/spikein.smk"
include: "../rules/hFDR.smk"


patients_with_epithelial_cells = set(units.patient.unique()) - set(["TH103", "TH225", "TH266"])
patients_with_stroma_cells = set(units.patient.unique()) - set(["TH103", "TH225", "TH227"])
patients_with_macrophages = set(units.patient.unique()) - set(["TH171"])

# Straussman comparison
#FILTERED_PATIENT_MICROBE_READ_TABLE = join("output", "{patient}_{tax_level}_{method}_{kingdom}_filtered_reads.tsv")
#FILTERED_BINOM_MARKERS = join("output", "filtered-binomial-{patient}-{celltype}-{celltype_of_interest}-{tax_level}-{method}-{kingdom}-{pvaltype}-{lfc}.tsv")

# Figures
FIGURE4A1 = join("output", "plots", "figure_4A_1.pdf")
FIGURE4A2 = join("output", "plots", "figure_4A_2.pdf")
FIGURE4A3 = join("output", "plots", "figure_4A_3.pdf")
FIGURE4B1 = join("output", "plots", "figure_4B_1.pdf")
FIGURE4B2 = join("output", "plots", "figure_4B_2.pdf")
FIGURE4B3 = join("output", "plots", "figure_4B_3.pdf")

FIGURE4C1 = join("output", "plots", "figure_4C_1.pdf")
FIGURE4C2 = join("output", "plots", "figure_4C_2.pdf")
FIGURE4D = join("output", "plots", "figure4d.pdf")
FIGURE4E = join("output", "plots", "figure4e.pdf")
FIGURE4F = join("output", "plots", "figure4f.pdf")
#FIGURE5_extended = join("output", "plots", "{patient}", "{sample}", "{plate}", "figure5_extended_{tax_level}_{method}_{kingdom}_{norm}_{celltype}_{celltype_of_interest}_{celltype_comparison}_{microbe_of_interest}.pdf")
FIGURE5A = join("output", "plots", "figure_5A.pdf")

# MICROBE_SPIKEIN_PLATE_CORR_TABLE = join("output", "{patient}", "{tax_level}_{method}_{kingdom}_plate_spikein_correlation_table.tsv")
# MICROBE_SPIKEIN_CORR_TABLE = join("output", "{patient}", "{tax_level}_{method}_{kingdom}_spikein_correlation_table.tsv")

# files for differential expression analysis between
TUMOR_CELL_SCE = join("output", "all", "tumor_cells.rds")
# compare all infected tumors to all uninfected tumors
TTEST_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS = join("output", "all", "ttest_tumor_cells_only_infected_vs_uninfected_{direction}_{pvaltype}_{lfc}_{seed}.tsv")
WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS = join("output", "all", "wilcox_tumor_cells_only_infected_vs_uninfected_{direction}_{pvaltype}_{lfc}_{seed}.tsv")
MEAN_WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS = join("output", "all", "mean_wilcox_tumor_cells_only_infected_vs_uninfected_{pvaltype}_{lfc}.tsv")
# compare infected tumor of interest to all uninfected tumors
TTEST_TUMOR_OF_INTERST_UNINFECTED_TUMOR_CELL_RESULTS = join("output", "all", "ttest_tumor_cells_only_{tumor_of_interest}_vs_uninfected_{lfc}_{pvaltype}_{direction}.tsv")
WILCOX_TUMOR_OF_INTERST_UNINFECTED_TUMOR_CELL_RESULTS = join("output", "all", "wilcox_tumor_cells_only_{tumor_of_interest}_vs_uninfected_{lfc}_{pvaltype}_{direction}.tsv")

# GSEA files
GO_GENE_SETS = join("..", "data", "c5.go.bp.v7.2.symbols.gmt")
WILCOX_INFECTED_UNINFECTED_TUMORS_RANK = join("output", "GSEA", "all", "wilcox_tumor_cells_infected_vs_uninfected_{direction}_{pvaltype}_{lfc}_{seed}.rnk")
#GSEA_TUMOR_OF_INTERST_TABLE = join("output",  "GSEA", "{tumor_of_interest}", "ttest_tumor_cells_only_{tumor_of_interest}_vs_uninfected_{lfc}_{pvaltype}_{direction}.tsv")
#GSEA_INFECTED_UNINFECTED_TABLE = join("output",  "GSEA", "all", "wilcox_tumor_cells_only_vs_uninfected_{lfc}_{pvaltype}.tsv")

# GSEA_INFECTED_UNINFECTED_TABLE_LFC = join("output",  "GSEA", "all", "ttest_LFC_tumor_cells_only_vs_uninfected_{lfc}_{pvaltype}.tsv")
# GSEA_INFECTED_UNINFECTED_TABLE_TTEST_PVAL = join("output",  "GSEA", "all", "ttest_pval_tumor_cells_only_vs_uninfected_{lfc}_{pvaltype}.tsv")
# GSEA_INFECTED_UNINFECTED_TABLE_WILCOX_PVAL = join("output",  "GSEA", "all", "wilcox_pval_tumor_cells_only_vs_uninfected_{lfc}_{pvaltype}_{seed}_{direction}.tsv")
# TTEST_COMBINED_INFECTED_UNINFECTED_DIFF_EXP = join("output", "all", "combined_ttest_tumor_cells_infected_uninfected.tsv")
# TTEST_COMBINED_INFECTED_UNINFECTED_VOLCANO = join("output", "all", "combined_ttest_tumor_cells_infected_uninfected_volcano_plot.png")
# TTEST_COMBINED_INFECTED_UNINFECTED_GSEA = join("output", "GSEA", "combined_ttest_tumor_cells_infected_uninfected_gsea.tsv")

# GO_GENE_SETS = join("output", "c5.go.v7.2.symbols.gmt")
# GSEA_DE_TABLE = join("output", "{patient}", "GSEA-DE", "GO-{celltype}-{celltype_of_interest}-{celltype_comparison}-{norm}-{pvaltype}-{lfc}-{block}.tsv")
# GSEA_CORR_TABLE = join(
#     "output", "{patient}", "GSEA-microbe-abundance-correlation",
#     "spearman-correlation-{kingdom}-{tax_level}-{microbe}-{celltype}-{celltype_of_interest}-{celltype_comparison}-{block}-{method}.tsv"
#     )

PATIENT_HOST_GENE_MICROBE_ABUNDANCE_CORRELATION = join(
    "output", "{patient}", "host-gene-microbe-abundance-correlation",
    "spearman-correlation-{kingdom}-{tax_level}-{microbe}-{celltype}-{celltype_of_interest}-{celltype_comparison}-{block}-{method}.tsv"
    )

# plates = units[["patient", "sample", "plate"]].drop_duplicates()
#print(plates.shape)
# patients with multiple samples - TH248 and LT_S69 and LT_S74; TH226 and LT_S52 and LT_S57; TH179 and LT_S58 and LT_S79
rule all:
    input:
        expand(PATIENT_hFDR_WILCOX_MARKERS, method="PathSeq", kingdom="Bacteria",
               celltype="celltype1", celltype_of_interest="Tumor", celltype_comparison="immune",
               minprop=".5", block="plate", pvaltype="all", norm="spike", lfc=".5",
               direction="both", patient=units.patient.unique()),
        expand(PATIENT_hFDR_WILCOX_MARKERS, method="PathSeq", kingdom="Bacteria",
               celltype="Stroma", celltype_of_interest="Stroma", celltype_comparison="nonStroma",
               minprop=".5", block="plate", pvaltype="all", norm="spike", lfc=".5",
               direction="both", patient=patients_with_stroma_cells),
        # FIGURE5A1,
        FIGURE4A2,
        FIGURE4A3,
        # FIGURE5B,
        FIGURE4B2,
        FIGURE4B3,
        # FIGURE5E,
        #MEAN_WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS.format(pvaltype="some", lfc="0"),
        # FIGURE5B,
        # FIGURE5C1,
        # FIGURE5C2,
        # FIGURE6A,
        # FIGURE5D,
        # FIGURE5E,
        # expand(FIGURE5_extended, kingdom="Bacteria", method="PathSeq", patient="TH231",
        #        norm="spike", plate="B003119", sample="LT_S56",
        #        tax_level="genus", celltype="celltype1", celltype_of_interest="stroma",
        #        celltype_comparison="Tumor", microbe_of_interest="Leptotrichia"),
        #expand(WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS, direction="any", pvaltype="some", lfc=["0"], seed=range(0, 10)),
        #expand(WILCOX_INFECTED_UNINFECTED_TUMORS_RANK, direction="any", lfc="0", pvaltype="some", seed=[0, 1, 2])

### rules for plotting figures ###

rule plot_figures:
    input:
        FIGURE4A1,
        FIGURE4A2,
        FIGURE4A3,
        FIGURE4B1,
        FIGURE4B2,
        FIGURE4B3,
        FIGURE4C1,
        FIGURE4C2,
        FIGURE5A

rule plot_figure_4:
    input:
        FIGURE4A1,
        FIGURE4A2,
        FIGURE4A3,
        FIGURE4B1,
        FIGURE4B2,
        FIGURE4B3,
        FIGURE4C1,
        FIGURE4C2

rule plot_figure4a1:
    input:
        PATIENT_hFDR_WILCOX_MARKERS.format(kingdom="Bacteria", method="PathSeq",
               patient="TH238", celltype="celltype1", lfc=".5",
               celltype_of_interest="Tumor", celltype_comparison="immune",
               norm="spike", pvaltype="any", block="plate", direction="both",
               minprop="0.5"),
    output:
        FIGURE4A1
    script:
        "src/plot_figure4a1.R"

rule plot_figure4a2:
    params:
        spike_functions="../src/spike_normalization_functions.R"
    input:
        PATIENT_MICROBE_READ_TABLE.format(kingdom="Bacteria", method="PathSeq",
               patient="TH238",  norm="spike", tax_level="species"),
        PATIENT_SPIKEIN_READCOUNT.format(patient="TH238"),
        PATIENT_SAMPLE_METADATA.format(kingdom="Bacteria", method="PathSeq",
               patient="TH238", norm="spike", tax_level="species"),
        PATIENT_PATHSEQ_TAXID_MAP.format(kingdom="Bacteria", method="PathSeq",
               patient="TH238"),
    output:
        FIGURE4A2
    script:
        "src/plot_figure4a2.R"

rule plot_figure4a3:
    params:
        spike_functions="../src/spike_normalization_functions.R"
    input:
        PATIENT_MICROBE_READ_TABLE.format(kingdom="Bacteria", method="PathSeq",
               patient="TH238",  norm="spike", tax_level="order"),
        PATIENT_SPIKEIN_READCOUNT.format(patient="TH238"),
        PATIENT_SAMPLE_METADATA.format(kingdom="Bacteria", method="PathSeq",
               patient="TH238", norm="spike", tax_level="order"),
        PATIENT_PATHSEQ_TAXID_MAP.format(kingdom="Bacteria", method="PathSeq",
               patient="TH238"),
    output:
        FIGURE4A3
    script:
        "src/plot_figure4a3.R"

rule plot_figure4b1:
    input:
        PATIENT_hFDR_WILCOX_MARKERS.format(kingdom="Bacteria", method="PathSeq",
               patient="TH266", celltype="celltype1", lfc="0.5",
               celltype_of_interest="Tumor", celltype_comparison="immune",
               norm="spike", pvaltype="any", block="plate", direction="both",
               minprop="0.5"),
    output:
        FIGURE4B1
    script:
        "src/plot_figure4b1.R"

rule plot_figure4b2:
    params:
        spike_functions="../src/spike_normalization_functions.R"
    input:
        PATIENT_MICROBE_READ_TABLE.format(kingdom="Bacteria", method="PathSeq",
               patient="TH266",  norm="spike", tax_level="species"),
        PATIENT_SPIKEIN_READCOUNT.format(patient="TH266"),
        PATIENT_SAMPLE_METADATA.format(kingdom="Bacteria", method="PathSeq",
               patient="TH266", norm="spike", tax_level="species"),
        PATIENT_PATHSEQ_TAXID_MAP.format(kingdom="Bacteria", method="PathSeq",
               patient="TH266"),
    output:
        FIGURE4B2
    script:
        "src/plot_figure4b2.R"

rule plot_figure4b3:
    params:
        spike_functions="../src/spike_normalization_functions.R"
    input:
        PATIENT_MICROBE_READ_TABLE.format(kingdom="Bacteria", method="PathSeq",
               patient="TH266",  norm="spike", tax_level="species"),
        PATIENT_SPIKEIN_READCOUNT.format(patient="TH266"),
        PATIENT_SAMPLE_METADATA.format(kingdom="Bacteria", method="PathSeq",
               patient="TH266", norm="spike", tax_level="species"),
        PATIENT_PATHSEQ_TAXID_MAP.format(kingdom="Bacteria", method="PathSeq",
               patient="TH266"),
    output:
        FIGURE4B3
    script:
        "src/plot_figure4b3.R"

rule plot_figure4c1:
    input:
        PATIENT_hFDR_WILCOX_MARKERS.format(kingdom="Bacteria", method="PathSeq",
               patient="TH231", celltype="Stroma", lfc="0.5",
               celltype_of_interest="Stroma", celltype_comparison="nonStroma",
               norm="spike", pvaltype="any", block="plate", direction="both",
               minprop="0.5"),
    output:
        FIGURE4C1
    script:
        "src/plot_figure4c1.R"

rule plot_figure4c2:
    params:
        spike_functions="../src/spike_normalization_functions.R"
    input:
        PLATE_MICROBE_READ_TABLE.format(kingdom="All", method="PathSeq",
               patient="TH231", tax_level="genus", plate="B003119", sample="LT_S56"),
        PLATE_SPIKEIN_READCOUNT.format(patient="TH231", plate="B003119", sample="LT_S56"),
        PLATE_SAMPLE_METADATA.format(kingdom="All", method="PathSeq",
               patient="TH231", tax_level="genus", plate="B003119", sample="LT_S56"),
        PATIENT_PATHSEQ_TAXID_MAP.format(kingdom="All", method="PathSeq",
               patient="TH231"),
    output:
        FIGURE4C2
    script:
        "src/plot_figure4c2.R"

# rule generate_figure4d:
#     input:
#         PATIENT_hFDR_WILCOX_MARKERS.format(kingdom="Bacteria", method="PathSeq",
#                patient="TH231", celltype="celltype1", lfc="0.5",
#                celltype_of_interest="Tumor", celltype_comparison="immune",
#                norm="spike", pvaltype="any", block="plate", direction="both",
#                minprop="0.5"),
#     output:
#         FIGURE4D
#     script:
#         "src/plot_figure5d.R"
#
# rule generate_figure5e:
#     input:
#         PATIENT_hFDR_WILCOX_MARKERS.format(kingdom="Bacteria", method="PathSeq",
#                patient="TH236", celltype="celltype1", lfc="0.5",
#                celltype_of_interest="Tumor", celltype_comparison="immune",
#                norm="spike", pvaltype="any", block="plate", direction="both",
#                minprop="0.5"),
#     output:
#         FIGURE5E
#     script:
#         "src/plot_figure5e.R"
#
#
#
# rule generate_figure5f:
#     input:
#         PATIENT_hFDR_WILCOX_MARKERS.format(kingdom="Bacteria", method="PathSeq",
#                patient="TH220", celltype="celltype1", lfc="0.5",
#                celltype_of_interest="immune", celltype_comparison="Tumor",
#                norm="spike", pvaltype="any", block="plate", direction="both",
#                minprop="0.5"),
#     output:
#         FIGURE5F
#     script:
#         "src/plot_figure5f.R"

rule plot_figure_5a:
    input:
        WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS.format(direction="both", pvaltype="some", lfc="0.5", seed=0)
    output:
        FIGURE5A
    script:
        "src/plot_figure5a.R"


### rules for running GSEA  ###

rule rank_infected_uninfected_wilcox_DE_genes_for_GSEA:
    input:
        WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS
    output:
        WILCOX_INFECTED_UNINFECTED_TUMORS_RANK
    script:
        "../src/rank_wilcox_DE_for_GSEA.py"


### rules for comparing transcriptome of infected tumors to uninfected tumors ###

# generate sce object to be used in later rules
rule generate_sce_of_tumor_cells_from_all_patients:
    input:
        genes=expand(PATIENT_HUMAN_READCOUNT, patient=units.patient.unique()),
        spikes=expand(PATIENT_SPIKEIN_READCOUNT, patient=units.patient.unique()),
        meta="data/units.tsv"
    output:
        TUMOR_CELL_SCE
    script:
        "src/generate_sce_tumor_cells_all_patients.R"

# identify DE genes between one infected tumor and all other uninfected tumors
rule run_differential_expression_tumor_of_interest_vs_uninfected_tumor_cells_only:
    input:
        TUMOR_CELL_SCE
    output:
        TTEST_TUMOR_OF_INTERST_UNINFECTED_TUMOR_CELL_RESULTS,
        WILCOX_TUMOR_OF_INTERST_UNINFECTED_TUMOR_CELL_RESULTS,
    script:
        "src/run_differential_expression_between_tumors.R"

rule combine_differential_expression_infected_vs_uninfected_tumor_cells:
    wildcard_constraints:
        direction="both"
    input:
        up=WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS.format(lfc="{lfc}", seed="{seed}", pvaltype="{pvaltype}", direction="up"),
        down=WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS.format(lfc="{lfc}", seed="{seed}", pvaltype="{pvaltype}", direction="down"),
    output:
        WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS
    script:
        "../src/generate_two_sided_wilcox_pvalues_host_transcriptome.py"

rule combine_patient_host_DE_using_spikeins_both:
    input:
        up=expand(WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS, lfc="{lfc}",
               pvaltype="{pvaltype}", seed=range(0, 10), direction="up"),
        down=expand(WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS, lfc="{lfc}",
               pvaltype="{pvaltype}", seed=range(0, 10), direction="down"),
    output:
        MEAN_WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS,
    script:
        "src/combine_differential_expression_results.py"


# compare all infected tumor cells vs. all uninfected tumor cells
rule run_differential_expression_infected_vs_uninfected_tumor_cells_only:
    wildcard_constraints:
        direction="any|up|down"
    input:
        TUMOR_CELL_SCE
    output:
        TTEST_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS,
        WILCOX_INFECTED_UNINFECTED_TUMOR_CELL_RESULTS,
    script:
        "src/run_differential_expression_infected_tumor_cells.R"




rule calculate_host_gene_microbe_abundance_correlation:
    wildcard_constraints:
        norm="spike"
    input:
        PATIENT_HUMAN_READCOUNT,
        PATIENT_SPIKEIN_READCOUNT,
        PATIENT_MICROBE_READ_TABLE,
        PATIENT_SAMPLE_METADATA,
        PATIENT_PATHSEQ_TAXID_MAP
    output:
        PATIENT_HOST_GENE_MICROBE_ABUNDANCE_CORRELATION
    script:
        "../src/compute_microbe_abundance_host_gene_expression_correlation.R"


# ssGSEA stuff
# rule run_ssGSEA:
#     input:
#         "output/all/combined_wilcox_tumor_cells_infected_uninfected_0.5_some.tsv",
#         "output/clean_TCGA_{cancertype}_gene_expression.tsv"
#     output:
#         "output/TCGA_{cancertype}_ssGSEA_score.tsv"
#     script:
#         "src/run_ssGSEA.R"
#
# rule clean_TCGA_data:
#     input:
#         "../data/3586c0da-64d0-4b74-a449-5ff4d9136611",
#         "../data/TCGA-CDR-SupplementalTableS1.xlsx",
#     output:
#         "output/clean_TCGA_{cancertype}_gene_expression.tsv"
#     script:
#         "src/clean_TCGA_data.py"

# rule compute_spikein_correlation:
#     input:
#         PATIENT_MICROBE_READ_TABLE,
#         PATIENT_SPIKEIN_READCOUNT,
#         PATIENT_SAMPLE_METADATA,
#         PATHSEQ_TAXID_MAP,
#     output:
#         MICROBE_SPIKEIN_PLATE_CORR_TABLE,
#         MICROBE_SPIKEIN_CORR_TABLE
#     script:
#         "../Aulicino2018/src/compute_spikein_correlation.py"

### rules for Straussman comparison ###

# rule filter_by_Straussman:
#     input:
#         "data/lung_hits.tsv",
#         PATIENT_MICROBE_READ_TABLE
#     output:
#         FILTERED_PATIENT_MICROBE_READ_TABLE
#     script:
#         "../src/filter_by_Straussman_hits.py"

# rule identify_Straussman_overlap:
#     input:
#         "output/PathSeq_{kingdom}_{tax_level}_name_taxid_mapping.tsv".format(kingdom="Bacteria", tax_level="species"),
#         MICROBE_READ_TABLE.format(kingdom="Bacteria", tax_level="species", method="PathSeq"),
#         "../data/microbev1_lung_cancer_hits.tsv"
#     output:
#         "output/species_overlap_with_Straussman.tsv"
#     script:
#         "../src/identify_Straussman_overlap.py"


# rsync -avc --include='pathseq.txt' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Maynard2020/output/ data/

# rsync -avc --include='barcodes.tsv' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Maynard2020/output/ data/
# rsync -avc --include='features.tsv' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Maynard2020/output/ data/
# rsync -avc --include='matrix.mtx' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Maynard2020/output/ data/
