from os.path import join
import pandas as pd

patients = ['Mel102', 'Mel103', 'Mel105', 'Mel106', 'Mel110', 'Mel112', 'Mel128', 'Mel129pa', 'Mel194', 'Mel98'] # MGH57, 'MGH103', 'MGH61'

EDGER_RESULTS = join("output", "{tax_level}_edgeR_{norm_method}_results_{patient}-{celltype}.tsv")
TTEST_MARKERS = join("output", "t-test-{patient}-{celltype}-{celltype_of_interest}-{tax_level}-{method}-{norm}.tsv")
WILCOX_MARKERS = join("output", "wilcox-{patient}-{celltype}-{celltype_of_interest}-{tax_level}-{method}-{norm}.tsv")
BINOM_MARKERS = join("output", "binom-{patient}-{celltype}-{celltype_of_interest}-{tax_level}-{method}-{norm}.tsv")

PLATE_TTEST_MARKERS = join("output", "t-test-{patient}-{celltype}-{celltype_of_interest}-{tax_level}-{method}-{norm}-{tumor_plate}-{nontumor_plate}.tsv")
PLATE_WILCOX_MARKERS = join("output", "wilcox-{patient}-{celltype}-{celltype_of_interest}-{tax_level}-{method}-{norm}-{tumor_plate}-{nontumor_plate}.tsv")

COMBINED_WILCOX_MARKERS = join("output", "combined-wilcox-{patient}-{celltype}-{celltype_of_interest}-{tax_level}-{method}-{norm}.tsv")

FIGURE2C = join("output", "figure2c.png")

include: "../rules/common.smk"
include: "../rules/stats.smk"
#include: "../rules/plate.smk"
include: "../rules/plotting.smk"

rule all:
    input:
        expand(COMBINED_WILCOX_MARKERS, patient=[
            "Mel102", "Mel103", "Mel105","Mel106", "Mel110", "Mel112","Mel129pa",
            "Mel194"
            ],
               method="PathSeq", celltype_of_interest="Tumor", celltype="Tumor",
               tax_level="species", norm="deconv"),
        # expand(DECONV_NORM_PLOT, microbe=["Propionibacterium"], method="PathSeq",
        #        celltype="celltype1", tax_level="genus", patient="Mel129pa"),
        expand(DECONV_NORM_PLOT, microbe=[
            "Coprinopsis", "Heterobasidion", "Phanerochaete", "Chryseobacterium",
            "Laccaria", "Brevundimonas", "Enhydrobacter", "Paeniglutamicibacter",
            "Anthracocystis"
            ],
               method="PathSeq", celltype="celltype1", tax_level="genus",
               patient="Mel106"),
        #expand(ALL_DECONV_NORM_PLOT, microbe=["Fusobacterium"], method="PathSeq", celltype="patient", tax_level="genus"),
        #expand(ALL_DECONV_NORM_PLOT, microbe=["Fusobacterium_periodonticum", "Fusobacterium_nucleatum"], method="PathSeq", celltype="patient", tax_level="species"),
        # expand(DECONV_NORM_PLOT, microbe=["Delftia", "Plasmodium", "Bradyrhizobium"], patient=["Mel98"], method="PathSeq", celltype="cellType", tax_level="genus"),
        # expand(DECONV_NORM_PLOT, microbe=["Ralstonia"], patient=["Mel105"], method="PathSeq", celltype="Tumor", tax_level="genus"),
        # expand(DECONV_NORM_PLOT, microbe=["Streptococcus", "Ralstonia", "Torulaspora", "Massilia", "Rhodotorula", "Mycobacterium"], patient="Mel110", method="PathSeq", celltype="cellType", tax_level="genus"),
        # expand(DECONV_NORM_PLOT, microbe=["Metarhizium", "Leptosphaeria", "Propionibacterium", "Parastagonospora", "Paracoccidioides"], patient="Mel129pa", method="PathSeq", celltype="cellType", tax_level="genus"),
        # expand(DECONV_NORM_PLOT, microbe="Sphaerulina", patient="Mel194", method="PathSeq", celltype="cellType", tax_level="genus"),
        #expand(DECONV_NORM_PLOT, microbe="Bifidobacteriaceae", patient="MGH56", method="PathSeq", celltype="celltype1", tax_level="family"),
        # expand(TTEST_MARKERS, patient=patients, celltype="Tumor", celltype_of_interest=["Mal", "T_CD8", "T_CD4", "B_cell", "Endo_"], tax_level=["genus"], method="PathSeq", norm="deconv"),
        # expand(MICROBE_READ_TABLE, method="PathSeq", tax_level=["species"])

rule plot_figure2c:
    input:
        PATIENT_MICROBE_READ_TABLE.format(method="PathSeq", tax_level="genus", patient="Mel129pa"),
        PATIENT_SAMPLE_METADATA.format(method="PathSeq", tax_level="genus", patient="Mel129pa"),
        PATIENT_MICROBE_READ_TABLE.format(method="PathSeq", tax_level="species", patient="Mel106"),
        PATIENT_SAMPLE_METADATA.format(method="PathSeq", tax_level="species", patient="Mel106")
    output:
        FIGURE2C
    script:
        "src/plot_figure2c.R"

rule combine_Mel102_results:
    wildcard_constraints:
        patient="Mel102"
    input:
        expand(PLATE_WILCOX_MARKERS, patient="{patient}",
               tumor_plate=["CD45neg_CD90neg_P0", "CD45neg_CD90neg_P3"],
               nontumor_plate=["CD45pos_P1", "CD45pos_P2"], method="{method}",
               celltype_of_interest="{celltype_of_interest}", celltype="{celltype}",
               tax_level="{tax_level}", norm="{norm}")
    output:
        COMBINED_WILCOX_MARKERS
    script:
        "src/combine_plate_tests.py"

rule combine_Mel103_results:
    wildcard_constraints:
        patient="Mel103"
    input:
        expand(PLATE_WILCOX_MARKERS, patient="{patient}",
               tumor_plate=["CD45neg_CD90neg_P0", "CD45neg_CD90neg_P1"],
               nontumor_plate=["CD45pos_P1", "CD45pos_P2"], method="{method}",
               celltype_of_interest="{celltype_of_interest}", celltype="{celltype}",
               tax_level="{tax_level}", norm="{norm}")
    output:
        COMBINED_WILCOX_MARKERS
    script:
        "src/combine_plate_tests.py"

rule combine_Mel105_results:
    wildcard_constraints:
        patient="Mel105"
    input:
        expand(PLATE_WILCOX_MARKERS, patient="{patient}",
               tumor_plate=["CD45neg_P2", "Zombineg_CD45neg_CD90neg_P1"],
               nontumor_plate=["CD45pos_P2", "CD45pos_calceinpos_P0"], method="{method}",
               celltype_of_interest="{celltype_of_interest}", celltype="{celltype}",
               tax_level="{tax_level}", norm="{norm}")
    output:
        COMBINED_WILCOX_MARKERS
    script:
        "src/combine_plate_tests.py"

rule combine_Mel106_results:
    wildcard_constraints:
        patient="Mel106"
    input:
        expand(PLATE_WILCOX_MARKERS, patient="{patient}",
               tumor_plate=["CD45neg_CD90neg_P3", "CD45neg_P3"],
               nontumor_plate=["CD45pos_P2", "CD45pos_P3"], method="{method}",
               celltype_of_interest="{celltype_of_interest}", celltype="{celltype}",
               tax_level="{tax_level}", norm="{norm}")
    output:
        COMBINED_WILCOX_MARKERS
    script:
        "src/combine_plate_tests.py"

rule combine_Mel110_results:
    wildcard_constraints:
        patient="Mel110"
    input:
        expand(PLATE_WILCOX_MARKERS, patient="{patient}",
               tumor_plate=["CD45neg_CD90neg_P0", "CD45neg_CD90neg_P1", "CD45neg_CD90neg_P2"],
               nontumor_plate=["CD45pos_P2", "CD45pos_P3"], method="{method}",
               celltype_of_interest="{celltype_of_interest}", celltype="{celltype}",
               tax_level="{tax_level}", norm="{norm}")
    output:
        COMBINED_WILCOX_MARKERS
    script:
        "src/combine_plate_tests.py"

rule combine_Mel112_results:
    wildcard_constraints:
        patient="Mel112"
    input:
        expand(PLATE_WILCOX_MARKERS, patient="{patient}",
               tumor_plate=["CD45neg_CD90neg_P1", "CD45neg_CD90neg_P3"],
               nontumor_plate=["CD45pos_P0", "CD45pos_P3"], method="{method}",
               celltype_of_interest="{celltype_of_interest}", celltype="{celltype}",
               tax_level="{tax_level}", norm="{norm}")
    output:
        COMBINED_WILCOX_MARKERS
    script:
        "src/combine_plate_tests.py"

rule combine_Mel129pa_results:
    wildcard_constraints:
        patient="Mel129pa"
    input:
        expand(PLATE_WILCOX_MARKERS, patient="{patient}",
               tumor_plate=["CD45negCD90neg_P0", "CD45neg_CD90neg_P1"],
               nontumor_plate=["CD45pos_P0"], method="{method}",
               celltype_of_interest="{celltype_of_interest}", celltype="{celltype}",
               tax_level="{tax_level}", norm="{norm}")
    output:
        COMBINED_WILCOX_MARKERS
    script:
        "src/combine_plate_tests.py"

rule combine_Mel194_results:
    wildcard_constraints:
        patient="Mel194"
    input:
        expand(PLATE_WILCOX_MARKERS, patient="{patient}",
               tumor_plate=["CD45neg_EPCAMpos_pl4_P1", "cd45negcd90neg_PL3_P2"],
               nontumor_plate=["CD45pos_pl4_P0", "cd45pos_PL3_P3"], method="{method}",
               celltype_of_interest="{celltype_of_interest}", celltype="{celltype}",
               tax_level="{tax_level}", norm="{norm}")
    output:
        COMBINED_WILCOX_MARKERS
    script:
        "src/combine_plate_tests.py"

rule calculate_markers_plate_test:
    wildcard_constraints:
        norm="deconv"
    input:
        PATIENT_MICROBE_READ_TABLE,
        PATIENT_SAMPLE_METADATA
    output:
        PLATE_TTEST_MARKERS,
        PLATE_WILCOX_MARKERS
    script:
        "src/run_scran_marker_analysis_plate.R"

# rule split_by_plate:
#     input:
#         PATIENT_MICROBE_READ_TABLE,
#         PATIENT_SAMPLE_METADATA
#     output:
#         PATIENT_PLATE_MICROBE_READ_TABLE,
#         PATIENT_PLATE_SAMPLE_METADATA
#     script:
#         ""

# rules for processing the data
rule convert_PathSeq_to_read_counts:
    params:
        join("data", "PathSeq", "{}-{}", "pathseq.txt")
    input:
        "data/patients.tsv",
        "data/samples.tsv"
    output:
        MICROBE_READ_TABLE,
        SAMPLE_METADATA
    script:
        "../src/convert_PathSeq_output_to_read_counts.py"



# rsync -avc --include='pathseq.txt' --include='*/' --exclude='*' biowulf:/data/Robinson-SB/scRNA-seq-microbe-identification/Jerby-Arnon2018/identify-microbes-workflow/output/ data/
