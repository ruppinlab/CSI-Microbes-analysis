from os.path import join

wildcard_constraints:
    tax_level="root|superkingdom|phylum|class|order|family|genus|species|no_rank",
    celltype="Tumor|celltype1",
    patient="SC028",
    batch="Sample6[a-c]"

include: "../rules/common.smk"



PATIENT_BATCH_MICROBE_READ_TABLE = join("output", "{patient}_{batch}_{tax_level}_{method}_{kingdom}_reads.tsv")
PATIENT_BATCH_SAMPLE_METADATA = join("output", "{patient}_{batch}_{tax_level}_{method}_{kingdom}_metadata.tsv")
PATIENT_BINOM_MARKERS = join("output", "binomial-{patient}-{celltype}-{celltype_of_interest}-{tax_level}-{kingdom}-{method}-{pvaltype}.tsv")
PATIENT_BATCH_BINOM_MARKERS = join("output", "binomial-{patient}-{batch}-{celltype}-{celltype_of_interest}-{tax_level}-{kingdom}-{method}-{pvaltype}.tsv")

# exclude "SC001" for now - no tumors cells processed
rule all:
    input:
        expand(PATIENT_BATCH_BINOM_MARKERS, patient="SC028", batch="Sample6a",
               celltype="celltype1", celltype_of_interest="Epithelial cells",
               method="PathSeq", tax_level="genus", pvaltype="any", kingdom="Bacteria"),
        expand(PATIENT_BATCH_BINOM_MARKERS, patient="SC028", batch="Sample6a",
               celltype="Tumor", celltype_of_interest="Tumor",
               method="PathSeq", tax_level="genus", pvaltype="any", kingdom="Bacteria")

rule calculate_batch_markers:
    wildcard_constraints:
        norm="deconv"
    input:
        PATIENT_BATCH_MICROBE_READ_TABLE,
        PATIENT_BATCH_SAMPLE_METADATA
    output:
        PATIENT_BATCH_BINOM_MARKERS
    script:
        "../src/run_scran_binomial_marker_analysis.R"

rule calculate_patient_markers:
    wildcard_constraints:
        norm="deconv"
    input:
        PATIENT_MICROBE_READ_TABLE,
        PATIENT_SAMPLE_METADATA
    output:
        PATIENT_BINOM_MARKERS
    script:
        "../src/run_scran_binomial_marker_analysis.R"

rule filter_patient_read_table_by_batch:
    input:
        PATIENT_MICROBE_READ_TABLE,
        PATIENT_SAMPLE_METADATA
    output:
        PATIENT_BATCH_MICROBE_READ_TABLE,
        PATIENT_BATCH_SAMPLE_METADATA
    script:
        "../src/split_read_matrices_by_batch.py"

rule convert_PathSeq_to_readcounts:
    wildcard_constraints:
        method="PathSeq"
    params:
        join("data", "PathSeq", "{}-{}-{}", "pathseq.txt")
    input:
        "data/units.tsv"
    output:
        MICROBE_READ_TABLE,
        SAMPLE_METADATA
    script:
        "../src/convert_scPathSeq_output_to_read_counts.py"

# rule PathSeq_barcode_readcounts:
#     wildcard_constraints:
#         method="PathSeq"
#     params:
#         join("data", "PathSeq", "SC028-Sample6a", "{}-scores.txt")
#     input:
#         "data/PathSeq/SC028-Sample6a/barcodes.tsv"
#     output:
#         join("output", "{tax_level}_{method}_microbe_reads_Sample6a_barcodes.tsv")
#     script:
#         "src/convert_barcode_PathSeq_output_to_read_counts.py"

# rsync -avc --include='pathseq.txt' --include='*/' --exclude='*' helix:/data/Robinson-SB/scRNA-seq-microbe-identification/Lee2020/output/ data/
# rsync -avc --include='*-scores.txt' --include='*/' --exclude='*' helix:/data/Robinson-SB/scRNA-seq-microbe-identification/Lee2020/output/ data/
# rsync -avc --include='raw_feature_bc_matrix.h5' --include='*/' --exclude='*' helix:/data/Robinson-SB/scRNA-seq-microbe-identification/Lee2020/ data/
