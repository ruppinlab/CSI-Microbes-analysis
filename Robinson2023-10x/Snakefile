from os.path import join
import pandas as pd


#patients = pd.read_csv("data/patients.tsv", sep="\t")
samples = pd.read_csv("data/samples.tsv", sep="\t")[["patient", "sample"]].drop_duplicates()
units = pd.read_csv("data/units.tsv", sep="\t")

wildcard_constraints:
    celltype="celltype1",
    patient="P1",
    celltype_of_interest="HCT116|THP1|Jurkat",
    celltype_comparison="HCT116|THP1|Jurkat|all",
    celltype1="HCT116|THP1|Jurkat",
    celltype2="HCT116|THP1|Jurkat",
    celltype3="HCT116|THP1|Jurkat",

include: "../rules/common.smk"
include: "../rules/analysis-10x.smk"
# include: "../rules/hFDR.smk"

Fuso_feature_table = "data/GCF_001457555.1_NCTC10562_feature_table.txt"
SRPRISM_input_file = "raw/SRPRISM/{patient}/{sample}/Fn-unpaired-count.gff"

FIGURE_1E_PLOT = join("output", "plots", "Figure_1E.pdf")
FIGURE_1F_PLOT = join("output", "plots", "Figure_1F.pdf")
FIGURE_2A_PIECHART = "output/plots/figure_2A_piechart.svg"
FIGURE_S2D_PLOT = join("output", "plots", "Figure_S2D.pdf")

FIGURE_S1C_PIECHART_3p = "output/plots/figure_S1C_piechart_3p.svg"
FIGURE_S1C_PIECHART_5p = "output/plots/figure_S1C_piechart_5p.svg"
#FIGS1E_PLOT = join("output", "plots", "FigureS1E.pdf")
#FIGS2_PLOT = join("output", "plots", "FigureS2.pdf")
# SAMPLE_FISHER_EXACT = join("output", "{patient}", "{sample}", "fisher-exact-{celltype}-{celltype_of_interest}-{celltype_comparison}-{tax_level}-{method}-{kingdom}-{minprop}-{min_umis}.tsv")
TABLE_S1 = "output/table_s1.tsv"

rule all:
    input:
        FIGURE_1E_PLOT,
        FIGURE_1F_PLOT,
        FIGURE_S2D_PLOT,
        FIGURE_2A_PIECHART,
        FIGURE_S1C_PIECHART_3p,
        FIGURE_S1C_PIECHART_5p,
        TABLE_S1
        # "output/plots/piechart.svg",
        # FIGS1D_PLOT,
        # FIGS1E_PLOT,
        # FIGS2_PLOT
        # PATIENT_MICROBE_READ_TABLE.format(kingdom="All", method="PathSeq", patient="P1", tax_level="genus"),


rule generate_table_S1:
    input:
        SAMPLE_FISHER_EXACT.format(patient="P1", sample="SCAF2963_3_Live", celltype="celltype1", celltype_of_interest="HCT116", celltype_comparison="Jurkat", tax_level="genus", method="PathSeq", kingdom="All", minprop=0, min_umis=2),
        SAMPLE_FISHER_EXACT.format(patient="P1", sample="SCAF2965_5_Live", celltype="celltype1", celltype_of_interest="HCT116", celltype_comparison="Jurkat", tax_level="genus", method="PathSeq", kingdom="All", minprop=0, min_umis=2),
        SAMPLE_FISHER_EXACT.format(patient="P1", sample="SCAF2963_3_Live", celltype="celltype1", celltype_of_interest="HCT116", celltype_comparison="THP1", tax_level="genus", method="PathSeq", kingdom="All", minprop=0, min_umis=2),
        SAMPLE_FISHER_EXACT.format(patient="P1", sample="SCAF2965_5_Live", celltype="celltype1", celltype_of_interest="HCT116", celltype_comparison="THP1", tax_level="genus", method="PathSeq", kingdom="All", minprop=0, min_umis=2),
        SAMPLE_FISHER_EXACT.format(patient="P1", sample="SCAF2963_3_Live", celltype="celltype1", celltype_of_interest="THP1", celltype_comparison="Jurkat", tax_level="genus", method="PathSeq", kingdom="All", minprop=0, min_umis=2),
        SAMPLE_FISHER_EXACT.format(patient="P1", sample="SCAF2965_5_Live", celltype="celltype1", celltype_of_interest="THP1", celltype_comparison="Jurkat", tax_level="genus", method="PathSeq", kingdom="All", minprop=0, min_umis=2),
        SAMPLE_FISHER_EXACT.format(patient="P1", sample="SCAF2963_3_Live", celltype="celltype1", celltype_of_interest="THP1", celltype_comparison="Jurkat", tax_level="genus", method="PathSeq", kingdom="All", minprop=0, min_umis=2),
        SAMPLE_FISHER_EXACT.format(patient="P1", sample="SCAF2965_5_Live", celltype="celltype1", celltype_of_interest="THP1", celltype_comparison="Jurkat", tax_level="genus", method="PathSeq", kingdom="All", minprop=0, min_umis=2),
        SAMPLE_FISHER_EXACT.format(patient="P1", sample="SCAF2962_2_HK", celltype="celltype1", celltype_of_interest="HCT116", celltype_comparison="THP1", tax_level="genus", method="PathSeq", kingdom="All", minprop=0, min_umis=2),
        SAMPLE_FISHER_EXACT.format(patient="P1", sample="SCAF2962_2_HK", celltype="celltype1", celltype_of_interest="THP1", celltype_comparison="Jurkat", tax_level="genus", method="PathSeq", kingdom="All", minprop=0, min_umis=2),
    output:
        TABLE_S1
    script:
        "src/generate_table_S1.py"


# plot % of cells with >= 1 Fuso UMIs by cell-type and condition
rule plot_figure_1E:
    input:
        PATIENT_MICROBE_READ_TABLE.format(kingdom="All", method="PathSeq",
               patient="P1", tax_level="genus"),
        PATIENT_SAMPLE_METADATA.format(kingdom="All", method="PathSeq",
               patient="P1", tax_level="genus"),
        PATIENT_PATHSEQ_TAXID_MAP.format(kingdom="All", method="PathSeq",
               patient="P1"),
    output:
        FIGURE_1E_PLOT
    script:
        "src/plot_Fig1E.R"

# plot % of cells with >= 2 Fuso UMIs by cell-type and condition
rule plot_figure_S2D:
    input:
        PATIENT_MICROBE_READ_TABLE.format(kingdom="All", method="PathSeq",
               patient="P1", tax_level="genus"),
        PATIENT_SAMPLE_METADATA.format(kingdom="All", method="PathSeq",
               patient="P1", tax_level="genus"),
        PATIENT_PATHSEQ_TAXID_MAP.format(kingdom="All", method="PathSeq",
               patient="P1"),
    output:
        FIGURE_S2D_PLOT
    script:
        "src/plot_Fig_S2D.R"

rule plot_figure_1_F:
    input:
        PATIENT_MICROBE_READ_TABLE.format(kingdom="All", method="PathSeq",
               patient="P1", tax_level="genus"),
        PATIENT_SAMPLE_METADATA.format(kingdom="All", method="PathSeq",
               patient="P1", tax_level="genus"),
        PATIENT_PATHSEQ_TAXID_MAP.format(kingdom="All", method="PathSeq",
               patient="P1"),
    output:
        FIGURE_1F_PLOT
    script:
        "src/plot_Fig1F_n_UMIs_celltype.py"

# rule plot_figure_S1_E:
#     input:
#         PATIENT_MICROBE_READ_TABLE.format(kingdom="All", method="PathSeq",
#                patient="P1", tax_level="genus"),
#         PATIENT_SAMPLE_METADATA.format(kingdom="All", method="PathSeq",
#                patient="P1", tax_level="genus"),
#         PATIENT_PATHSEQ_TAXID_MAP.format(kingdom="All", method="PathSeq",
#                patient="P1"),
#     output:
#         FIGS1E_PLOT
#     script:
#         "src/plot_Fuso_nreads_no_celltype.R"

# Figure 2A - piechart of genera by reads
rule plot_genera_piechart:
    input:
        PATIENT_MICROBE_READ_TABLE.format(kingdom="All", method="PathSeq",
               patient="P1", tax_level="genus"),
        PATIENT_SAMPLE_METADATA.format(kingdom="All", method="PathSeq",
               patient="P1", tax_level="genus"),
        PATIENT_PATHSEQ_TAXID_MAP.format(kingdom="All", method="PathSeq",
               patient="P1"),
    output:
        FIGURE_2A_PIECHART
    script:
        "src/plot_Fig2A_piechart.py"

rule generate_Fuso_RNA_type_table:
    input:
        "data/units.tsv",
        Fuso_feature_table,
        expand(SRPRISM_input_file, zip, patient=samples["patient"], sample=samples["sample"])
    output:
        "output/Pt0/S0/{genome}-read-type-table.tsv"
    script:
        "src/generate_Fusobacterium_gene_tables_from_SRPRISM_10x.py"

# Figure S1C - piechart of the different RNA types
rule plot_RNA_type_piechart:
    input:
        "output/Pt0/S0/Fn-read-type-table.tsv"
    output:
        FIGURE_S1C_PIECHART_3p,
        FIGURE_S1C_PIECHART_5p,
    script:
        "src/plot_piechart_RNA_class.py"

# rsync -avc --include='pathseq.txt' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Robinson2022-10x/output/ raw/
# rsync -avc --include='barcodes.tsv.gz' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Robinson2022-10x/ raw/
# rsync -avc --include='raw_feature_bc_matrix.h5' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Robinson2022-10x/ raw/
# rsync -avc --include='Fn-unpaired-count.gff' --include='*/' --exclude='*' helix:/data/Robinson-SB/CSI-Microbes-identification/Robinson2022-10x/output/ raw/
