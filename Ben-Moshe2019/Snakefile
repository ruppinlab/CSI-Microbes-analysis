from os.path import join

wildcard_constraints:
    tax_level="root|superkingdom|phylum|class|order|family|genus|species|no_rank"

ruleorder: filter_read_table_by_batch > filter_read_table_by_patient

BATCH_MICROBE_READ_TABLE = join("output", "{batch}_{tax_level}_{method}_{kingdom}_reads.tsv")
BATCH_SAMPLE_METADATA = join("output", "{batch}_{tax_level}_{method}_{kingdom}_metadata.tsv")
BATCH_BINOM_MARKERS = join("output", "binomial-{batch}-{celltype}-{celltype_of_interest}-{tax_level}-{method}-{kingdom}-{norm}-{pvaltype}.tsv")

include: "../rules/common.smk"

rule all:
    input:
        expand(BATCH_BINOM_MARKERS, tax_level=["species", "genus"],
               batch=["GSM3454528", "GSM3454529"], method="PathSeq",
               norm="deconv", pvaltype="all", kingdom="Bacteria",
               celltype="Monocyte", celltype_of_interest="Monocyte")

rule calculate_markers:
    wildcard_constraints:
        norm="deconv"
    input:
        BATCH_MICROBE_READ_TABLE,
        BATCH_SAMPLE_METADATA
    output:
        BATCH_BINOM_MARKERS
    script:
        "../src/run_scran_binomial_marker_analysis.R"

rule filter_read_table_by_batch:
    input:
        MICROBE_READ_TABLE,
        SAMPLE_METADATA
    output:
        BATCH_MICROBE_READ_TABLE,
        BATCH_SAMPLE_METADATA
    script:
        "../src/split_read_matrices_by_batch.py"

rule convert_PathSeq_to_readcounts:
    wildcard_constraints:
        method="PathSeq"
    params:
        join("data", "PathSeq", "{}-{}-{}", "pathseq.txt")
    input:
        "data/units.tsv"
    output:
        MICROBE_READ_TABLE,
        SAMPLE_METADATA
    script:
        "../src/convert_scPathSeq_output_to_read_counts.py"

# rsync -avc --include='pathseq.txt' --include='*/' --exclude='*' helix:/data/Robinson-SB/scRNA-seq-microbe-identification/Ben-Moshe2019/output/ data/
